// template author: YouKnowWho
const int N = 5e5 + 9;
long long a[N];
struct SegmentTree {
  #define lc (nd << 1)
  #define rc ((nd << 1) | 1)
  long long t[4 * N], lazy[4 * N];
  SegmentTree() {
    memset(t, 0, sizeof t);
    memset(lazy, 0, sizeof lazy);
  }
  inline void push(int nd, int b, int e) {
    if (lazy[nd] == 0) return;
    t[nd] = t[nd] + lazy[nd] * (e - b + 1);
    if (b != e) {
      lazy[lc] = lazy[lc] + lazy[nd];
      lazy[rc] = lazy[rc] + lazy[nd];
    }
    lazy[nd] = 0;
  }
  inline long long RES(long long a,long long b) {
    return a + b;
  }
  inline void SET(int nd) {
    t[nd] = t[lc] + t[rc];
  }
  void build(int nd, int b, int e) {
    lazy[nd] = 0;
    if (b == e) {
      t[nd] = a[b];
      return;
    }
    int mid = (b + e) >> 1;
    build(lc, b, mid);
    build(rc, mid + 1, e);
    SET(nd);
  }
  void update(int nd, int b, int e, int i, int j, long long v) {
    push(nd, b, e);
    if (j < b || e < i) return;
    if (i <= b && e <= j) {
      lazy[nd] = v; //set lazy
      push(nd, b, e);
      return;
    }
    int mid = (b + e) >> 1;
    update(lc, b, mid, i, j, v);
    update(rc, mid + 1, e, i, j, v);
    SET(nd);
  }
  long long query(int nd, int b, int e, int i, int j) {
    push(nd, b, e);
    if (i > e || b > j) return 0; //return null
    if (i <= b && e <= j) return t[nd];
    int mid = (b + e) >> 1;
    return RES(query(lc, b, mid, i, j), query(rc, mid + 1, e, i, j));
  }
} T;
