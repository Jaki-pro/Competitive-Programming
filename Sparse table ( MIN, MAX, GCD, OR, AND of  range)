// calculating MAX of range
#include<bits/stdc++.h>
using namespace std;
#define ll              long long int
const ll N = 1e6;
int lg[N+3], po[N+2]; // example: po[7]=4, po[8]=8, po[9]=8, po[10]=8;
void solve()
{
    ll n, m;
    cin>>n;
    vector<int> v(n+1);
    for(int i=1;i<=n; i++) cin>>v[i]; // 1 based array
    int table[20][n+2]; // Sparse Table
    for(ll j=0; j<=n; j++) table[j][0] = v[j]; // For length=1, set default array value
    
    // Building Parse Table
    ll len = 2;
    for(ll i=1; i<20; i++) // For length 2^i
    {
        if(len>n) break;
        for(ll j=1; j<=n-len+1; j++)
        {
            table[j][i] = max(table[j][i-1], table[j+len/2][i-1]);
        }
        len*=2;
    }
    cin>>m; // query for range max
    while(m--)
    {
        ll x, y;
        cin>>x>>y;
        len = y-x+1;
        cout<<max(table[x][lg[len]], table[y-po[len]+1][lg[len]])<<endl;
        // From X to Y maximum value
    }
}
int main()
{
    // Pre calculate Log and BasePower
    for(int i=1; i<=N; i++)
    {
        int a = log2(i);
        lg[i] = a;
        po[i] = pow(2, a);
    }
    solve();
    return 0;
}
